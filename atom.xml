<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Liorr Yehuda Morrison]]></title>
  <link href="http://blog.liorrmorrison.com/atom.xml" rel="self"/>
  <link href="http://blog.liorrmorrison.com/"/>
  <updated>2014-11-10T12:18:29-08:00</updated>
  <id>http://blog.liorrmorrison.com/</id>
  <author>
    <name><![CDATA[Liorr Yehuda Morrison]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Enumerables: Some Mixins for Your Picks-ins]]></title>
    <link href="http://blog.liorrmorrison.com/2014/10/08/enumerables-some-mixins-for-your-picks-ins/"/>
    <updated>2014-10-08T19:05:09-07:00</updated>
    <id>http://blog.liorrmorrison.com/2014/10/08/enumerables-some-mixins-for-your-picks-ins</id>
    <content type="html"><![CDATA[<p>Now almost done with Week 4 of Phase 0, we are plumbing the depths of Ruby and its amazing abilities. For this blog post, I will introduce you to one of Ruby&rsquo;s built-in Enumerable methods. Enumerable is a &ldquo;mixin&rdquo; module in Ruby, meaning that its methods are borrowed from various other class methods. Therefore, you can apply Enumerable methods to various classes, namely arrays and hashes. The method I&rsquo;ll focus in on is the #map method, which can be used on both arrays and hashes. I am going to assume that you have some sense of what the #each method does &mdash; basically, it iterates over an array, calling the given block (the code between braces or after a &lsquo;do&rsquo; statement) once for each element in the array; it passes each array element as a parameter to the block. But it doesn&rsquo;t have the power to actually modify the element. You can use the array&rsquo;s elements to create new data, but not to change the elements themselves, as the following example demonstrates:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">total</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">num</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">sum</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">total</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span> <span class="c1">#=&gt; 6</span>
</span><span class='line'>
</span><span class='line'><span class="n">numbers</span> <span class="c1">#=&gt; [1, 2, 3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, #each is used to add up the elements of the array, and store them in a separate variable. If you were to return the array afterwards, it would be identical. Here&rsquo;s an analogy: the #each method &ldquo;visits&rdquo; each element and can get to know them well, but it can&rsquo;t change them. That&rsquo;s where map comes in. To demonstrate the #map method&rsquo;s differences, let&rsquo;s compare the following two snippets of code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">##### using #each #####</span>
</span><span class='line'>
</span><span class='line'><span class="n">numbers</span> <span class="o">=</span>  <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span>
</span><span class='line'>  <span class="n">num</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; [1, 2, 3, 4, 5]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">##### using #map #####</span>
</span><span class='line'>
</span><span class='line'><span class="n">array</span> <span class="c1">#=&gt; [1, 2, 3, 4, 5]</span>
</span><span class='line'>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span>
</span><span class='line'>  <span class="n">num</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; [2, 4, 6, 8, 10]</span>
</span><span class='line'>
</span><span class='line'><span class="n">numbers</span> <span class="c1">#=&gt; [1, 2, 3, 4, 5]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The #each method does nothing, while #map successfully executes the block and modifies each element of the array. But does it really change the array? Not exactly. It shows you a modified version of that array with the code block executed, but you can think of that as a temporary glimpse into what it would do it if actually did modify it. As you can see in the above example, if you call the array after calling the code block on it, it remains unchanged. For a true, permanent change, we need the &ldquo;!&rdquo; at the end, or we could save the modified array to a new variable. The exclamation point at the end of a method indicates that the method is what is called a &ldquo;dangerous&rdquo; or &ldquo;destructive&rdquo; method (or colloquially, a &ldquo;bang&rdquo; method) because it permanently changes the composition of the array, as the example below demonstrates:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">numbers</span><span class="o">.</span><span class="n">map!</span> <span class="k">do</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span>
</span><span class='line'>  <span class="n">num</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; [2, 4, 6, 8, 10]</span>
</span><span class='line'>
</span><span class='line'><span class="n">numbers</span> <span class="c1">#=&gt; [2, 4, 6, 8, 10]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The #map and #map! methods are very useful in making real changes to various data structures. For example, if you had an array of data containing both strings and numbers and wanted to convert all the numbers to strings, you could use #map or #map!, depending on whether you want to make a modified &ldquo;copy&rdquo; of the array for immediate use, or change it permanently.</p>

<p>Here is another example that uses the map method to convert array elements into strings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">i_want_pets</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;I&quot;</span><span class="p">,</span> <span class="s2">&quot;want&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="s2">&quot;pets&quot;</span><span class="p">,</span> <span class="s2">&quot;but&quot;</span><span class="p">,</span> <span class="s2">&quot;only&quot;</span><span class="p">,</span> <span class="s2">&quot;have&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">my_array_sorting_method</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
</span><span class='line'>  <span class="n">source</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">element</span><span class="o">|</span> <span class="n">element</span><span class="o">.</span><span class="n">to_s</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; [&quot;I&quot;, &quot;want&quot;, &quot;3&quot;, &quot;pets&quot;, &quot;but&quot;, &quot;only&quot;, &quot;have&quot;, &quot;2&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And there you have a little introduction to Ruby&rsquo;s Enumerable module! Be sure to check out the <a href="http://ruby-doc.org">Ruby Documentation </a> for more information and to see other Enumerable methods.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thinking Styles: Change the Way You Think]]></title>
    <link href="http://blog.liorrmorrison.com/2014/10/02/thinking-styles-change-the-way-you-think/"/>
    <updated>2014-10-02T17:55:50-07:00</updated>
    <id>http://blog.liorrmorrison.com/2014/10/02/thinking-styles-change-the-way-you-think</id>
    <content type="html"><![CDATA[<p>I&rsquo;m not at all surprised to learn that my learning style is overwhelmingly &ldquo;concrete random&rdquo;, with a secondary style of &ldquo;abstract random&rdquo;. There are four learning styles, according to the Gregoric Mind Styles model:</p>

<ol>
<li>concrete sequential</li>
<li>concrete random</li>
<li>abstract sequential</li>
<li>abstract random</li>
</ol>


<p>Some tendencies of concrete random thinkers are: experimentation, risk-taking, intuiting, and independence. Concrete random thinkers benefit from trial and error; they ask lots of questions, like to jump in and try things for themselves, and are a bit competitive. These are all qualities that definitely resonate with me, and I&rsquo;m very glad to know about my learning style going into DBC. It seems the program is already set up for learners like me, as it is very hands-on, experimental, and self-directed. I will naturally engage well with the curriculum and enjoy jumping in and trying concepts out on my own. If I am struggling to understand a concept during one of the lectures, I will take solace in the fact that I will likely clear up any confusion by engaging and tinkering with the material for a couple hours.</p>

<p>Phase 0 has been very positive and overall smooth. The hardest part for me is having to learn the concepts on my own and immediately implementing them in the challenges. This was especially the case with HTML and CSS, where we had a small introduction on how to construct and style web pages, and then had to do it all on our own, to a much greater extent than the tutorial required. I&rsquo;m guessing it won&rsquo;t be the last time I have this type of experience where I am expected to go above and beyond, delving deep into a topic and learning it largely on my own. While it can be daunting to just delve into something without a route map, it ultimately leads to a profound understanding of the topic &ndash; all the frustrations and struggles help you grow, as impossible as it is to truly know that when you are in the throes of a seemingly insurmountable roadblock.</p>

<p>Working through these frustrations rather than giving up highlights one of the distinctions between the growth vs. fixed mindset. This dichotomy represents two viewpoints or mindsets regarding one&rsquo;s ability to grow and learn. The fixed mindset is characterized by a desire to seem a certain way, feelings of intense jealousy and threat upon hearing of others&#8217; successes, and avoiding challenges. Ultimately this leads to no growth in one&rsquo;s capacity to achieve something. The growth mindset is just the opposite: challenges are embraced, others&#8217; successes are inspiring, and giving up is not an option. At this point, I&rsquo;m definitely somewhere in the middle. Because I am so new to this tech world, I&rsquo;m so young, and I haven&rsquo;t finish college, I don&rsquo;t exactly have a great deal of confidence in myself; so I do unfortunately stray to the fixed mindset side of the spectrum sometimes. I get jealous and I am a little afraid of challenges. But at the very least I am aware that there is still work to be done on my mindset. I am working to actively change it, and I think DBC will provide an ideal environment for further, more substantial changes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arrays &amp; Hashes: One Is Silver and the Other Gold]]></title>
    <link href="http://blog.liorrmorrison.com/2014/09/30/arrays-and-hashes-one-is-silver-and-the-other-gold/"/>
    <updated>2014-09-30T14:22:53-07:00</updated>
    <id>http://blog.liorrmorrison.com/2014/09/30/arrays-and-hashes-one-is-silver-and-the-other-gold</id>
    <content type="html"><![CDATA[<p>Now almost a third of the way through Phase 0 of Dev Bootcamp, we&rsquo;ve finally moved on from git, HTML, and CSS to the true heart and soul of programming: scripting &ndash; the part that actually makes your web site do stuff rather than just display it. For the first blog topic, we&rsquo;ll discuss arrays and hashes, which are two ways of storing data. Arrays and hashes are each their own classes in the Ruby programming language, meaning they come with their own set of rules that govern how they can be used, and methods than can manipulate the data within them. First let&rsquo;s talk about arrays, since they&rsquo;re simpler, and understanding hashes is easier once you understand arrays.</p>

<p>An array is a series of elements grouped and stored together, separated by commas. They are encapsulated by a pair of brackets on both ends of the series of elements. The elements can be of various types, including strings, numbers, symbols, etc, such as the example below illustrates:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">example_array</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="ss">:symbol</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;this&quot;</span><span class="p">,</span> <span class="s2">&quot;is&quot;</span><span class="p">,</span> <span class="s2">&quot;crazy&quot;</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, you actually can store an array inside of an array (an array within an array is called a nested array). In addition to the element itself, the array knows where the element &ldquo;lives&rdquo; (its position) inside of it, something called the <em>index</em>. The index begins at zero, so the first element of the array can be called like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">example_array</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="c1">#=&gt; &quot;string&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>How would you call the second element of the nested array?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">example_array</span><span class="o">[</span><span class="mi">3</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="c1">#=&gt; &quot;is&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Good. Now that we have an understanding of arrays, we can delve into the world of hashes. Hashes are similar to arrays in that they are also a means of storing a series of elements, but they don&rsquo;t just stop there. Hashes store relationships between its elements in what are called key-value pairs. Whereas an array could store a list of cities:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">city_array</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:New_York</span><span class="p">,</span> <span class="ss">:Los_Angeles</span><span class="p">,</span> <span class="ss">:Chicago</span><span class="p">,</span> <span class="ss">:Houston</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>the hash could store them AND tell you their populations (or whatever corresponding piece of data), where the city names are the &ldquo;keys&rdquo; and the populations are the &ldquo;values&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">city_hash</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">New_York</span><span class="p">:</span>    <span class="mi">8300000</span><span class="p">,</span>
</span><span class='line'>              <span class="ss">Los_Angeles</span><span class="p">:</span> <span class="mi">3900000</span><span class="p">,</span>
</span><span class='line'>              <span class="ss">Chicago</span><span class="p">:</span>    <span class="mi">2800000</span><span class="p">,</span>
</span><span class='line'>              <span class="ss">Houston</span><span class="p">:</span>    <span class="mi">2200000</span>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> You can access a key&rsquo;s corresponding value like so:</p>

<pre><code class="`ruby"> city_hash[New_York] #=&gt; 8300000
</code></pre>

<p> As you can see, hashes allow for relationships between values, compared to arrays which just list them in a series. Both are incredibly useful and are fundamental to just about any large-scale project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Subleties: Margin, Padding, and Border]]></title>
    <link href="http://blog.liorrmorrison.com/2014/09/28/css-subleties-margin/"/>
    <updated>2014-09-28T12:10:21-07:00</updated>
    <id>http://blog.liorrmorrison.com/2014/09/28/css-subleties-margin</id>
    <content type="html"><![CDATA[<p>After having immersed myself in the world of HTML and CSS through creating a fully functional website in a mere 36 hours, I came out of it with a great deal of knowledge (although admittedly an equally great deal of questions) about front-end web development and design. Today I will do my best to explain one such piece of knowledge of which I feel I have a pretty clear understanding: the difference between margins, padding, and borders. To understand these topics at all, I need to first explain the fundamental structure of almost all websites. When you load a website, you immediately notice that its content is organized in a certain way. You may have a header bar, one or several content areas, a navigation bar, a footer, etc. There is always a lot of thought (or there at least should be!) that goes into this design. When writing the code for the website, what allows the programmer to tell which material to go where? Well, odds are, the tool s/he used was the div. A div, which derives from the word &ldquo;divide&rdquo; is a part of the web page that you section off. Making divs is really easy in the HTML file (the content and framework part of the site), but the challenging part is bringing them to &ldquo;life&rdquo; using CSS (cascading style sheets). When you create a div in the HTML, it exists, but it has no idea where to go on the web page, so you give it instructions by using CSS properties like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#div</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">50%</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">40%</span><span class="p">;</span>
</span><span class='line'>  <span class="k">float</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background-color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-style</span><span class="o">:</span> <span class="k">solid</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-color</span><span class="o">:</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border-width</span><span class="o">:</span> <span class="m">2px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, what&rsquo;s the difference between padding, margins, and borders? First, let me explain padding and margins, as they are the most closely-related and confusable of the three. The margin of a div determines how much space the div has relative to other divs and the confines of the web page. If you set a div with all four margins set to 0, it will exist flush against other divs or the edges of the web page. There will be no breathing room. So the margin determines the space outside of the div itself relative to other elements of the web page.</p>

<p>The padding, on the other hand, is more inward-looking. It determines how close the div&rsquo;s content can get to the div&rsquo;s end. If you set all four sides to padding 0, the content will extend right up flush against the outer walls of the div. If you give the content more padding, it will stay away from the outer walls. You can compare the margin vs. padding issue to government, as margin is like foreign policy (how divs interact with the outside world), and padding is like domestic policy (how divs treat what&rsquo;s inside of them).</p>

<p>Finally, the border is simply that: the outermost part of the div. The border doesn&rsquo;t really determine anything about the div&rsquo;s relationship with other divs (margin) or its own inner content (padding). Rather, it is an almost purely stylistic feature. You can style the border in many ways, from a simple black solid line, to a dotted line, to even 3-D designs. Borders adds some character to the website and help compartmentalize the content. The one trick with the border is that if you make very large borders, they actually protrude outside of the div&rsquo;s territory (imagine an extremely thick border fence around a country that cuts into its neighboring country&rsquo;s territory). The programmer has to watch out for this, and sometimes has to compensate for large borders by changing around margins so that the border doesn&rsquo;t interfere with other content. Other than this case, borders don&rsquo;t really influence relationships between divs, and certainly not relationships between divs and their content.</p>

<p>So there you have it! I hope I helped clarify some confusion regarding these topics!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git, GitHub, & Version Control: Programmers' Godsend]]></title>
    <link href="http://blog.liorrmorrison.com/2014/09/18/version-control/"/>
    <updated>2014-09-18T13:45:42-07:00</updated>
    <id>http://blog.liorrmorrison.com/2014/09/18/version-control</id>
    <content type="html"><![CDATA[<p>Version control in computer programming has many benefits. For one, it basically allows the programmer to &ldquo;go back in time&rdquo; in that various versions of the project are saved throughout a period of time. If the programmer works on the project, but accidentally adds a bug in committing those changes, they can go back to the version of that code <em>before</em> they made that mistake, rather than trying to figure out how it was before. This saves a lot of time, panic, and effort! Version control is also essential in collaborative projects, where there is more than one programmer working on a code base. It allows the programmers to each have their own copy of the code base, and make changes to that personal copy (and test those changes to make sure they work/don&rsquo;t add a bug) before adding it to the master copy. Git is software that makes version control easy. It runs in the background of any directory you decide to initialize with git. It</p>

<ul>
<li><p>notices if you have made any changes to that directory, whether it be adding files or editing files,</p></li>
<li><p>knows exactly what those changes are, and can show you them, and</p></li>
<li><p>allows you to save (&ldquo;commit&rdquo;) those changes along with a small message where you describe what changes you have made.</p></li>
</ul>


<p>Git then keeps a log of your commits (changes), and you can go back and see the code as it was before and after the various changes you made. GitHub is another useful tool for programmers, especially for teams of developers. Storing your code on GitHub allows you to collaborate with people remotely, so you can theoretically work on a project with a remote team all around the world, so long as they have Internet access. While git lives locally on your computer, and is therefore useful for working on your local disk, GitHub lives on the cloud, and works in tandem with git to push your code on to GitHub, enabling other team members to see your code, and enabling <em>you</em> to make changes to the master copy of the project. GitHub also provides peace of mind, knowing that your code is stored on a remote and very reliable server; it basically acts as a backup of your code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Who I Am]]></title>
    <link href="http://blog.liorrmorrison.com/2014/09/12/who-i-am/"/>
    <updated>2014-09-12T22:06:40-07:00</updated>
    <id>http://blog.liorrmorrison.com/2014/09/12/who-i-am</id>
    <content type="html"><![CDATA[<p>Yeah, I&rsquo;m a noob, but everyone starts somewhere.</p>

<p>I am a twenty-year-old living in San Francisco, and I&rsquo;m about to start intensive software development training at Dev Bootcamp, the recently established coding school that has, in a mere two years, pioneered an all-new, avant-garde genre in the field of education. What led me here? Less than two years ago I was a geography major at a ritzy liberal arts college in Vermont, and now I&rsquo;m in San Francisco studying to become a programmer? After completing my first year of college, I took what I thought would be a semester off to save money ($60,000 tuition + meager family income meant lots of debt, fast) and do some introspection. My life from 9th grade-on had been a pre-written (and admittedly boring) script, slaving away at academic work just to get in to my dream college. Taking a step off the proverbial treadmill seemed like just the thing to clear my mind and devote some time to myself. So being the geography nerd that I was (and still am), I traveled around the US for a couple months, and then and spent some time teaching and translating in the Middle East. But before I knew it, the grand adventure had ended, and it was time to return to academia&hellip; Except when I returned, my perspective had changed. The whole I was in school, I never gave it much critical thought &mdash; ironically enough, I gave plenty of critical thought to the works of literature I studied, but not to the education itself. Coming back, facing the sky-high price tag and questionable practicality of my liberal arts education, I decided to extend my leave&hellip;(dramatic pause) <em>indefinitely</em>.</p>

<p>So I worked for a while, got some financial freedom, but was soon ready for something bigger and better&hellip; and boy, let me tell you, the prospect of enrolling in community college classes just <em>didn&rsquo;t</em> have that spark I was looking for. And that&rsquo;s why I&rsquo;m here. Writing this blog. Studying programming. Challenging the status quo by putting off college and learning something completely different, in a setting I didn&rsquo;t even know existed a year ago. I had always been a fan and avid user of technology, but for whatever reason didn&rsquo;t consider going into it. I never thought I had what it took to be a programmer&hellip; Well, turns out I&rsquo;m wrong.</p>

<p>Programming isn&rsquo;t about holing up and doing weird esoteric math-like things all day. It&rsquo;s about logical thinking and familiarizing yourself with languages to express that thinking. It&rsquo;s about creation. And what better field is there than one that will pay you to think? And one that allows you to integrate your passions into the work that you do?</p>

<p>I&rsquo;m disillusioned with the status quo. I&rsquo;m excited about learning how to learn, about challenging myself in unprecedented ways. I intend this blog to be a means through which I synthesize new information, mostly to help me organize make connections between ideas, but also theoretically to help other noobs like myself navigate this new world.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Request-Response]]></title>
    <link href="http://blog.liorrmorrison.com/2014/09/07/request-response/"/>
    <updated>2014-09-07T15:12:29-07:00</updated>
    <id>http://blog.liorrmorrison.com/2014/09/07/request-response</id>
    <content type="html"><![CDATA[<p>Request-Response is the fundamental building block of the Internet and computer networking. The systems works likes so:</p>

<p>A personal computer, the <em>client</em>, is used to access a web page stored on a remote database. The database is linked to a computer that acts as the <em>server</em>, which can access the database and provide the requested information to the client. Using a web browser, the client requests the web page from the server, and the server responds to the client with the requested information by accessing the database. It&rsquo;s no coincidence that the words <em>client</em> and <em>server</em> are used for this system, as it&rsquo;s very analogous to a restaurant. The client, or customer, orders the food by telling the server, or waiter, what he/she wants (&ldquo;Hi, I&rsquo;ll have a google burger please&rdquo;). The waiter then goes to the kitchen, the database, gets the order, and serves it to the &ldquo;client&rdquo;/customer. Now it all makes sense why sometimes, when a server experiences higher-than-normal requests, it wont be able to respond to all of them, and will temporarily shut down. This is akin to how a restaurant will often make customers wait during peak hours, because they simple can&rsquo;t handle all those orders at once!</p>

<h3>HTTP</h3>

<p>The &ldquo;language&rdquo; used in this process is called the Hypertext Transper Protocol, and includes request &ldquo;methods&rdquo;, the most oft used being GET, HEAD, POST, and DELETE.</p>

<ul>
<li><p>GET is, as you could guess, is the request for retrieving data.Going to google.com, for example, would use the GET http method.Because it does not modify anything on the server-side, it is considered a &ldquo;safe&rdquo; method.</p></li>
<li><p>HEAD is the same as GET, except that the server only returns <em>metainformation</em>, that is, information about the entity rather than the entity itself. This is typically used in testing whether links are valid or have recently been modified. Because no modification occurs, it is also a safe method.</p></li>
<li><p>POST is the request that the server accept a new piece of information enclosed in the request; a typical example of this is a blog or forum, where clients are adding posts that change the state of the server, or have other side effects (like transferring money or sending an email). Because something is being changed with the POST method, it is not considered a safe
method.</p></li>
<li><p>DELETE is the request that a given piece of information or resource be deleted by the server, like deleting an email. Again, because the state of the server is being changed, it is not considered a safe method.</p></li>
</ul>


<p>During the early years of the Internet, the web was dominated by static websites that, when requested by the client, were generated and didn&rsquo;t change unless another request was made for the most up-to-date version. Today, however, there are a plethora of technologies that allow for dynamic web pages, where there is a constant flow of communication between the client and the server, allowing content to change from moment to moment. The main technology that made these dynamic web pages a reality is AJAX, which is behind almost all of the asynchronous, dynamic web applications that dominate today&rsquo;s Internet. AJAX allows for this <em>asynchronization</em>, where a request can be made in the back-end without having to wait for a response to make another request, thus not being synchronized. These asynchronous requests and responses can happen without having to reload the web page, which is how we see content changing on the website without the website&rsquo;s core structure changing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Continued]]></title>
    <link href="http://blog.liorrmorrison.com/2014/09/07/testing-continued/"/>
    <updated>2014-09-07T14:33:58-07:00</updated>
    <id>http://blog.liorrmorrison.com/2014/09/07/testing-continued</id>
    <content type="html"><![CDATA[<p>A few more notes to add about testing.
The entire testing process is comprised of different types of testing, including unit testing, feature testing, and integration testing.</p>

<p>-Unit Testing</p>

<p>Unit testing is the process of testing small units of code before implementing and integrating them into functionalities of a software. For example, if you were building a website that took credit card payments and wanted to check whether or not the user entered in a valid card number, you would want to make sure that the small piece of code that checks for a valid card number actually works before integrating it into the software.</p>

<p>-Integration Testing</p>

<p>The next step after unit testing is integration testing, which tests how those smaller units of code work in tandem. Perhaps several units of code come together to provide a working functionality element of a software, but not the entire working product.</p>

<p>-Feature testing</p>

<p>Feature testing is one of the last steps of the testing process in which the code comes together to form a working, functional product that a user can interface with. Feature testing may or may not be testing of the entire software, but it at the very least tests a major working component. Feature testing is usually less technical and actually involves using the software to ensure it works properly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing]]></title>
    <link href="http://blog.liorrmorrison.com/2014/09/07/testing/"/>
    <updated>2014-09-07T11:58:09-07:00</updated>
    <id>http://blog.liorrmorrison.com/2014/09/07/testing</id>
    <content type="html"><![CDATA[<p>These days more than ever, testing is a crucial part of agile software development. In a production environment where a developer&rsquo;s code is going to be used by potentially millions of users, the dev needs to have a level of certainty that his/her code is perfectly functional&mdash;or at least, as close to it as possible. Software can have thousands of lines of code running in the back-end, so testing that code in the development process is crucial that all elements of software function properly. This methodology is known as test-driven development (TDD), which can be broken down in the following steps (credit: <a href="http://joshdavis.com">Josh Davis</a>)</p>

<blockquote><ol>
<li><p>First the developer writes some tests.</p></li>
<li><p>The developer then runs those tests and (obviously) they fail because none of those features are actually implemented.</p></li>
<li><p>Next the developer actually implements those tests in code.</p></li>
<li><p>If the developer writes his code well, then in the next stage he will see his tests pass.</p></li>
<li><p>The developer can then refactor his code, add comments, clean it up, as he wishes because the developer knows that if the new code breaks something, then the tests will alert him by failing.</p></li>
</ol>
</blockquote>

<p>One such tool for TDD in Ruby is called RSpec, which is a Ruby testing framework packaged in a gem that allows the user to write highly readable tests for Ruby code. Here is an example of an RSpec test that tests whether the Hash method actually returns what the programmer expects:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Hash</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should return a blank instance&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the test reads almost exactly like plain English&mdash;even more so than Ruby!&mdash;with keywords like <code>describe</code>, <code>it</code>, and <code>should</code>. RSpec tests are typically written under the Ruby code in the same file, and are run by opening the file with RSpec instead of Ruby in the command line.</p>

<p>Consider the following method, which takes a string as an argument and obfuscates any social security number the string might contain:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">hide_all_ssns</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>  <span class="n">pattern</span> <span class="o">=</span> <span class="sr">/\d{3}.*?\d{2}.*?(\d{4})/</span>
</span><span class='line'>  <span class="n">string</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="s1">&#39;XXX-XX-\1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The method uses a regular expression (REGEXP), a generalized pattern that will find matches to the pattern in the string, and will replace the first 5 numbers of the SSN it finds with X&rsquo;s.</p>

<p>Here&rsquo;s a test that will check whether or not the <code>hide_all_ssns(string)</code> method does what it&rsquo;s designed to do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;hide_all_ssns&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;is defined as a method&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">defined?</span><span class="p">(</span><span class="n">hide_all_ssns</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s2">&quot;method&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;obfuscates any SSNs in the string&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">hide_all_ssns</span><span class="p">(</span><span class="s2">&quot;234-60-1422, 350-80-0744, 013-60-8762&quot;</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="s2">&quot;XXX-XX-1422, XXX-XX-0744, XXX-XX-8762&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;does not alter a string without SSNs in it&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">string</span> <span class="o">=</span> <span class="s2">&quot;please confirm your identity: XXX-XX-1422&quot;</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">hide_all_ssns</span><span class="p">(</span><span class="n">string</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="n">string</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, there are three tests: The first checks whether or not <code>hide_all_ssns</code> is a method, the second one checks whether it obfuscates the SSNs, and the third one checks whether it alters a string without any SSN matches - but I didn&rsquo;t even need to explain that! You can see exactly what the test is testing by just reading it!</p>

<p>To test the <code>hide_all_ssns</code> method, simply call the file with RSpec in the terminal like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rspec hide_ssns.rb
</span></code></pre></td></tr></table></div></figure>


<p>which will return the results of the test in the terminal. If it passes, it will say: <code>3 examples, 0 failures</code>, and if one or more of the tests fail, it will give you a breakdown of what the test expected vs. what it got.</p>

<p>RSpec is the Ruby testing tool, but rest assured that other languages have their own RSpec equivalent, like Jasmine for JavaScript&mdash;which reads very similarly to RSpec.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comp Sci Snippet]]></title>
    <link href="http://blog.liorrmorrison.com/2014/09/01/comp-sci-snippet/"/>
    <updated>2014-09-01T11:24:23-07:00</updated>
    <id>http://blog.liorrmorrison.com/2014/09/01/comp-sci-snippet</id>
    <content type="html"><![CDATA[<p>For my first blog post, a snippet of raw computer science: how are arrays stored in computer memory, as they relate to the Ruby programming language? First, let me marvel for a moment at the many degrees of abstraction between Ruby and what the computer processor ultimately processes: binary, or a series of 0&rsquo;s and 1&rsquo;s. Before knowing anything about computer programming, I used to think that programmers were of a rare nerdy breed of (maybe?) human who know the ins and outs of computers <em>so</em> thoroughly, they&rsquo;re practically computers themselves. This notion was probably influenced by a brainy elementary school classmate I had who, years after knowing him, went on to win a prestigious international coding contest. Perhaps <em>he</em> was one of those (human?) types, but one could theoretically be an excellent programmer without knowing much about how computers work. High-level programming languages&mdash;of which Ruby is an excellent example&mdash;provide that luxury, as their syntax, vocabulary, and flow are highly readable, so much so that a non-programmer could make sense of a basic Ruby program. This point is where the degrees of abstraction come in. Ruby itself is programmed using another language entirely, the C programming language, which, in its heyday, was considered a high-level, many-degrees-of-abstraction language as well. That&rsquo;s not to say C is obsolete — by no means! - but it is just fell in the ranks of high-level languages. And C, too, is built on other languages, which, moving down the latter of abstraction, eventually leads to assembly languages, then ultimately to machine code, which is the binary code that the CPU actually reads. Most programmers today, especially web developers, only have command over high-level languages, leaving the lower-level stuff all but unseen.</p>

<p>With all these layers of abstraction between high-level languages like Ruby and machine code, the answer to how arrays are stored in the computer&rsquo;s memory as they relate to Ruby might be&hellip;well, Ruby-like, in that the explanation will be understandable to the human reader, but not explain what is happening deep down in the RAM memory module, which is basically all electricity (there is actually nothing physical happening). An array is a Ruby <code>Class</code> defined by a collection of comma separated elements; you can have an array of numbers like <code>num_array = [1, 2, 3]</code>, an array of strings like <code>str_array = ["hi", "ho", "chitty", "chitty", "bang," "bang"]</code> or an array of any combination of types of elements like <code>mixed_array = [1, "chitty", :oh_my]</code>. When an array is created in Ruby, in addition to storing the array elements, the identity (basically, the &ldquo;address&rdquo; of where that array element lives in the memory) of each array element is also stored. Each Array element is stored in consecutive memory locations as the array&rsquo;s organization suggests, allowing for quick, easy access, rather than being stored at random locations, which would make calling and manipulating the array more time-consuming (even though the difference would be infinitesimal and undetectable to humans).</p>
]]></content>
  </entry>
  
</feed>
