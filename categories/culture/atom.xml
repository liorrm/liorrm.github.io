<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Culture | Liorr Yehuda Morrison]]></title>
  <link href="http://blog.liorrmorrison.com/categories/culture/atom.xml" rel="self"/>
  <link href="http://blog.liorrmorrison.com/"/>
  <updated>2014-12-06T12:45:37-08:00</updated>
  <id>http://blog.liorrmorrison.com/</id>
  <author>
    <name><![CDATA[Liorr Yehuda Morrison]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Phase 1 Retrospective]]></title>
    <link href="http://blog.liorrmorrison.com/2014/12/06/phase-1-retrospective/"/>
    <updated>2014-12-06T11:21:42-08:00</updated>
    <id>http://blog.liorrmorrison.com/2014/12/06/phase-1-retrospective</id>
    <content type="html"><![CDATA[<p>It has been a little while since I&rsquo;ve posted on here, but of course that&rsquo;s to be expected, since the intensive, on-site portion of DBC started a couple days after my last post. I can&rsquo;t even begin to describe how much I have learned, struggled, and grown through the first phase. Although the three could be seen as three sides of some mutant three-sided coin (I guess that would be like a cynlinder?), I&rsquo;ll just reflect briefly upon the three of them separately.</p>

<h2>Learning</h2>

<p>I have learned a great deal of new material, but most importantly, I have learned new paradigms and have taken my already existing Ruby knowledge to a level I never knew existed. A few weeks ago ago I would have been proud of a 15-line method that checked whether or not a credit card number was valid. Gone are the days of creating these &lsquo;all-in-ones&rsquo;, what DBC calls <em>God Methods</em>. I have learned the concepts of single responsibility methods and classes, object-oriented design, and reducing dependencies&ndash;within classes, between classes, and in methods by using the argument hash.</p>

<p>Another significant learning feat was moving in the direction of less primitive terminal apps by using multiple-files, SQL databases, ActiveRecord, and the model-view-controller design paradigm (hinting towards the beast that is Ruby on Rails).</p>

<p>Beyond this, my vanilla Ruby skills have improved a great deal, as I feel leagues more confident navigating almost any programming problem. The difficult part is no longer &ldquo;how do I do this in Ruby?&rdquo;, but rather, &ldquo;how do I break this problem down into tangible steps?&rdquo;</p>

<h2>Struggling</h2>

<p>I have struggled in two major regards these past few weeks; one, in how to approach programming challenges with many moving parts, such as with the Sudoku solver challenge during the first week of Phase 1; and two, in how to work on a challenge with a wide array of personalities, from timid and quiet to dominant and loud. The idea of fleshing out the problem in pseudocode (or as one of my Phase 1 teachers calls it on the Friday of Sudoku, Sud<em>o</em>code) was one I could grasp in the abstract, but when it came down to tackling the problem, I always felt myself gravitating towards just hacking away at the keyboard without giving the problem enough forethought. It was my first experience tackling a challenge of this magnitude, and for the first time I couldn&rsquo;t really get away with my Phase 0 &lsquo;head-on&rsquo; approach. This refusal to take a step back led to much frustration and ultimately not being able to complete the challenge by the end of the day. Although I did complete it the next day, the big takeaway from that day-long struggle was to make sure you know what you&rsquo;re going to do before you do it. Never explore unfamiliar territory without a map&ndash;or at the very least, a compass!</p>

<p>One more struggle, which combines the two above: group work, especially with unclear expectations and ambiguous leadership. It&rsquo;s not easy, and it&rsquo;s very frustrating. The lack of clarity leads to not being able to delegate tasks, and instead everyone working on the same task, which is incredible inefficient. As Sherif, one of my teachers, put it, it&rsquo;s like doing an &ldquo;eight legged sock race&rdquo;, which is exactly how it felt during one exercise.</p>

<h2>Growing</h2>

<p>My growing is very much tied to my struggles, as I grew tremendously from them. The first and most important way in which I&rsquo;ve grown is in my response to confusion. AN overarching lesson to be learned at DBC (and perhaps in life) is to be <em>fearless in the face of confusion</em>, an idea Sherif introduced to us. Although I still have a long way to go, I am beginning to feel less overwhelmed and panicked when presented with a difficult problem or concept.</p>

<p>I have also grown to be more at peace with failure. I&rsquo;ve realized that any failure is temporary, and can be rectified at any later point. This was the case with my momentary Sudoku failure, as well as other points at which I felt like I just &ldquo;couldn&rsquo;t do it&rdquo;. Every time, all it took was good night&rsquo;s sleep to approach the problem with a fresh perspective and solve what seemed insurmountable the day before.</p>

<p>Lastly, I approach problems much more methodically. I had the serendipitous privilege of being a team lead on a small one-day project. Whereas before I would have been too scared to delegate tasks and trust the process, this time we pseudocoded as a group until everyone was clear about their input and output. We all worked separately, and all it took was 5 minutes of &ldquo;gluing&rdquo; to put the parts of the project together. I was so pleased with the fact that, despite not seeing exactly what my team was working on, their components fit together quite seamlessly. It was a great way of finishing off Phase 1, in direct contrast to the much less successful group project I had a week earlier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Conference]]></title>
    <link href="http://blog.liorrmorrison.com/2014/11/13/is-using-octopress-cheating/"/>
    <updated>2014-11-13T16:09:21-08:00</updated>
    <id>http://blog.liorrmorrison.com/2014/11/13/is-using-octopress-cheating</id>
    <content type="html"><![CDATA[<p>During the second week of Phase 0 at DBC, we were asked to create our own websites, including a blog site. After laboring for many hours over it, including tinkering endlessly with CSS padding, margins, background-colors, etc (even just <em>thinking</em> about it overwhelms me!), I ended up with something I was pretty proud of! So for the last few months I&rsquo;ve been thinking, <em>&ldquo;Why not show off my own HTML CSS skills by keeping my original blog and presenting that to prospective employers, rather than using a framework?&rdquo;</em> I am now coming to realize I should indeed use a framework, which is needless to say because you&rsquo;re reading an Octopress blog. But why? Well, sure my original blog wasn&rsquo;t bad, but it was severely limited and had some bugs. The design wasn&rsquo;t completely responsive, and it didn&rsquo;t have nearly as much functionality (Facebook, Twitter, GutHub integration, DISQUS comments, etc.). Also, every time I wanted to write a post I would have to copy it in to the blog.html page and deal with annoying tags &ndash; not to mention the headache of including snippets of code. Bottom line: it was a hassle, and I&rsquo;ve realized no hackers really do it like that. Octopress is known as the &ldquo;hacker blog&rdquo; platform, and although the process of writing posts is relatively automated, you still use Sublime to write the posts, edit YML files yourself, and push to GitHub - so it really is a perfect hacker platform. There&rsquo;s no nitty gritty stuff like dealing with HTML tags, but the platform still requires the blogger to know how to use git and make changes to files written in various programming languages.</p>

<h3>But what about the design? Isn&rsquo;t it too bland?</h3>

<p>Well, I probably would have thought that a few months ago, but not now. I used to think that the more technical, animated, interactive a site is, the better&hellip; and that a site&rsquo;s coolness was determined by how many cool JS and jQuery features are implemented. Not so! What&rsquo;s the function? Form should follow function, and if the function is to read content and navigate blog arhives, you don&rsquo;t need any of that fancy stuff. It&rsquo;s not appropriate. Octopress does exactly what it should do, and nothing more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Makes a Good Question?]]></title>
    <link href="http://blog.liorrmorrison.com/2014/11/12/what-makes-a-good-question/"/>
    <updated>2014-11-12T13:52:27-08:00</updated>
    <id>http://blog.liorrmorrison.com/2014/11/12/what-makes-a-good-question</id>
    <content type="html"><![CDATA[<p>Hmm, good question! I would say it depends somewhat on the context in which the question is being asked, as well as the subject matter. For this blog post, to keep things within a manageable scope, I&rsquo;ll focus on what makes a good programming-related question. There&rsquo;s quite a lot of material out there about what makes good questions, and I echo many of the qualities that others have heralded. This post is a synthesis of outside sources with some of my own original thoughts and examples. The three overarching qualities that make good questions are:</p>

<ol>
<li>Specificity</li>
<li>Clarity</li>
<li>Relevance</li>
</ol>


<p>My fellow cohortmates are generally quite good at asking specific, clear, and relevant questions, but every once in a while you&rsquo;ll come across a question that more or less follows this pattern:</p>

<blockquote><p>&ldquo;Help! I can&rsquo;t get this to work&rdquo;</p>

<p>(insert overly large block of code here)</p>

<p>&ldquo;Why isn&rsquo;t it working?&rdquo;</p></blockquote>

<p>Perhaps it&rsquo;s obvious enough, but this is an example of a not-so-great question. Is it specific? No. Is it clear? Not at all. Is it relevant? Perhaps, but it&rsquo;s impossible to tell since it isn&rsquo;t specific or clear enough. You should evaluate a question&rsquo;s worthiness based on how easily you understand it, without having to run the code yourself. If anyone wanted to help out this distressed person, they would have to run the code to see what error the person is talking about, then troubleshoot it for the person. That&rsquo;s too much to ask of an answerer. Ideally, a good question is asked once the asker has already done a preliminary troubleshooting session, has isolated the problem somewhat, and asks a more specific question regarding the error message and the particular piece of code that causes the error, not the entire program. Odds are only a small fraction of the entire code file is causing the problem, so include only that code!</p>

<p>Let&rsquo;s quickly look at each of the three qualities I mention are key ingredients to good questions.</p>

<h3>Specificity</h3>

<p>Is your question about a particular issue you are having with your code? Go into detail about the issue. Don&rsquo;t do what the distressed person did above and just plop the entire thing on someone else. Take time to investigate what the problem is, and explain it as specifically as you can. If you have a limited amount of characters to work with, such as in the title of a question, make sure you make it as specific as possible so potential answerers know what they&rsquo;re dealing with before they click your question. Here&rsquo;s an example of two questions, one is good and one is bad. It should be very obvious:</p>

<blockquote><p>&ldquo;How does the math module work?&rdquo;</p>

<p>&ldquo;How do you endow a class with the Math module in Ruby?&rdquo;</p></blockquote>

<p>So which one is bad? The first one, of course. It&rsquo;s not specific enough. How does it <em>&ldquo;work&rdquo;</em>? I&rsquo;m not even sure what that means, or how to answer it. It&rsquo;s far too general. And what language are you talking about? Multiple languages might have the same math module, so you better be clear about which one you&rsquo;re talking about! If your question leads answerers to ask you questions in return (like that first one), it&rsquo;s probably not good question. Now, the second one: it&rsquo;s much better. It asks about how you perform a particular action in a particular language. Anyone who stumbles upon this question in forums knows exactly how to answer it, because it is clear and specific.</p>

<h3>Clarity</h3>

<p>Make sure there are no ambiguities in your question. There should be one way of interpreting it, and it should be clear, understandable, and not too complex. Here are two more examples:</p>

<blockquote><p>&ldquo;Calculating Averages in Ruby Name Error&rdquo;</p>

<p>&ldquo;I have this array: [1, 2, 3, 4] and a hash {1: &#8220;one&rdquo;, 2: &ldquo;two&rdquo;, 3: &ldquo;three&rdquo;, 4: &ldquo;four&rdquo;}. If I want to replace the array numbers with the hash variable, how would I do that?&#8221;</p></blockquote>

<p>Which one is bad? Both of them! The first one is incomprehensible and ambiguous. It suffers from being extremely unclear and extremely unspecific. The last one, while it is specific, is still ambiguous and almost too specific to be clear. The person could have asked: &ldquo;How do you replace the elements of an array with the values of a hash in Ruby?&rdquo;</p>

<p>Again, this last question is much more digestible. It is clear, unambiguous, and specific without being overwhelming with unnecessary details.</p>

<h3>Relevance</h3>

<p>This last category is a bit trickier. Basically, an asker should ask a question that adds value to his or her understanding of a concept, and they should know their audience - who they are asking. In most cases, such as on Stack Overflow, this is a wold-wide network of brilliant programmers. Don&rsquo;t waste their time asking irrelevant or overly basic questions.</p>

<blockquote><p>&ldquo;When was Ruby invented?&rdquo;</p>

<p>&ldquo;What is the difference between an integer and a float?&rdquo;</p></blockquote>

<p>If you are seeking a fact, Google it. Why ask a team of programmers a meta-fact about Ruby that warrants, literally, a one-word response? It&rsquo;s not worth their time, and it&rsquo;s certainly not an efficient use of your time, either! And how about the second example? It&rsquo;s not quite as bad, but again, this is a very basic question that you are better off discovering for yourself through your own research. Read about what an integer is, what a float is, and try working with them. If you come across a specific problem regarding the use of integers and floats in a program, <em>that&rsquo;s</em> the time to ask a question.</p>

<p>I know I may have veered a bit into what makes a good question on the Internet, but the basic tenets still apply to questions asked in the physical world.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calm Before the Storm: Phase 0 Reflections]]></title>
    <link href="http://blog.liorrmorrison.com/2014/11/07/calm-before-the-storm-phase-0-reflections/"/>
    <updated>2014-11-07T15:33:49-08:00</updated>
    <id>http://blog.liorrmorrison.com/2014/11/07/calm-before-the-storm-phase-0-reflections</id>
    <content type="html"><![CDATA[<p>Here are some reflections as I finish up my penultimate week of Phase 0. This is going to be more of a Joycean, stream-of-consciousness thing rather than something with even a modicum of structure, just to warn whoever might be reading this. First of all, oh man - I can&rsquo;t believe how quickly these weeks have been passing. I think there must be a magic recipe to have time fly: just enough work and mental stimulation to keep you busy and thinking on your feet, but not enough to stress you out or overwhelm you. That is exactly what Phase 0 has been. I was challenged just enough so that I didn&rsquo;t feel bored, but not too much as to resemble the stereotyped, never-ending 9-5 work week that Americans hate but do anyway. I realize the intensive phases will not be as leisurely and balanced as Phase 0 has been, but honestly I&rsquo;m ready for a challenge. Staying at home 5 days a week, while perfectly pleasant, is not the most stimulating environment. Let&rsquo;s just say 9 weeks of Phase 0 is a good amount. Anything greater and I&rsquo;d start to get a little stir crazy.</p>

<p>Now, as for material: it&rsquo;s pretty neat to see my progress, even though it&rsquo;s not that obvious. My mind is just far more used to thinking like a programmer, and my familiarity with Ruby especially makes it so that I have many tools in my arsenal to tackle almost any logic challenge. JavaScript has been a bit of a struggle, though I am determined to overcome my aversion to it, since it seems significantly more important in the overall software development world than Ruby (client-side &amp;&amp; server-side, whereas Ruby is just server-side). This is especially true with maps and mapping software, as much of the functionality is done on the client-side&hellip; and because I am obsessed with maps, I will need to become obsessed with JS! Hmm, what else? I think after doing a fair amount of both front-end and back-end, I can say that I prefer to technical challenge of back-end stuff, though I like that, in the snap of a finger, you can see front-end changes. An ideal place for me, perhaps, would be the back-end of the front-end, if such a place exists. I want to work on things that have visual components, but I don&rsquo;t want to just be tinkering around with changing font-sizes, padding, and margin.</p>

<p>So, here I am, 9 days away from Phase 1. I look forward to delving into Ruby for the first few weeks. I am keeping in mind the cultural components of DBC and remembering that this is a kitchen and we are all cooks. I can&rsquo;t expect anything to be served to me; I expect to create and co-create and have full autonomy over what I do. I want to check in with myself every once in a while to make sure I am sticking to my goals. As I am 20 years old and without a college degree, I have so many doubts and insecurities that I will continue to try to whisk away to the best of my ability. Who would hire me? But I need to keep the faith that the status quo is changing and that, at least in the tech world, a B.A. doesn&rsquo;t mean nearly as much as an impressive technical interview or even a single cool code project. I think being in the DBC environment will really help me gain confidence, insha&#8217;Allah.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stereotype Threat: A Vicious Cycle]]></title>
    <link href="http://blog.liorrmorrison.com/2014/10/25/stereotype-threat-a-vicious-cycle/"/>
    <updated>2014-10-25T14:33:34-07:00</updated>
    <id>http://blog.liorrmorrison.com/2014/10/25/stereotype-threat-a-vicious-cycle</id>
    <content type="html"><![CDATA[<p>Broadly, stereotype threat is a situation in which a person feels themselves to be living out negative stereotypes associated with their social group. It is a vicious cycle, because as the person continues to worry about their stereotype-affirming habits or behavior, they sabotage their chances of defeating and overcoming the stereotype threat, since the concept is rooted in a person&rsquo;s perception, not in reality. As a white male who grew up middle class and attended private school all my life, I am what many people would consider the privileged of the privileged, so how on earth could I relate to stereotype threat? Honestly, I haven&rsquo;t experienced it until recently, when I joined a social group I never thought I&rsquo;d be a part of: college dropouts. Yes, that&rsquo;s right. Despite my full devotion to academic success during high school, I find myself now, a couple years after graduation, not enrolled in college. Since leaving college a year ago, I&rsquo;ve been able to keep a pretty high morale, as I have plans, ambitions, and drive; but every once in a while, it dawns on me that&hellip; I am a college dropout. I think about my friends who are still in college, studying abroad, pursuing their degrees, and here I am, not doing that. If I let myself think about this too much, I become sad, depressed, discouraged, unmotivated. It spirals out of control. Even though I am doing something far more rewarding - forging my own path, delving into computer programming - I get sad and my morale plummets. Luckily I don&rsquo;t let these periods last too long, so I&rsquo;m not actually concerned I will start to waste my life away, but it&rsquo;s still a problem I&rsquo;m dealing with.</p>

<p>As for how to combat this phenomenon, there is no easy answer. I as an individual, while not completely powerless, can only do so much to lift peoples&#8217; morales. It really is as simple as realizing that the perceived threat is not a real one - it is entirely within your power to challenge the stereotype, just say &ldquo;no&rdquo;, and life live with purpose and drive. Having said that, I realize that &rsquo;s easier said than done. It really comes down to how much confidence you have in yourself. To mitigate the effects of stereotype threat, I will try to lift people up - be complimentary, encouraging, patient. At the very least, this will help people get confidence to continue down their journeys and be less bogged down by stereotypes.</p>
]]></content>
  </entry>
  
</feed>
