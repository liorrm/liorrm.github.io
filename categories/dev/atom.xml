<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Dev | Liorr Yehuda Morrison]]></title>
  <link href="http://blog.liorrmorrison.com/categories/dev/atom.xml" rel="self"/>
  <link href="http://blog.liorrmorrison.com/"/>
  <updated>2014-12-06T17:57:38-08:00</updated>
  <id>http://blog.liorrmorrison.com/</id>
  <author>
    <name><![CDATA[Liorr Yehuda Morrison]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Phase 1 Retrospective]]></title>
    <link href="http://blog.liorrmorrison.com/2014/12/06/phase-1-retrospective/"/>
    <updated>2014-12-06T11:21:42-08:00</updated>
    <id>http://blog.liorrmorrison.com/2014/12/06/phase-1-retrospective</id>
    <content type="html"><![CDATA[<p>It has been a little while since I&rsquo;ve posted on here, but of course that&rsquo;s to be expected, since the intensive, on-site portion of DBC started a couple days after my last post. I can&rsquo;t even begin to describe how much I have learned, struggled, and grown through the first phase. Although learning, struggling, and growing could be seen as three sides of some mutant three-sided coin (I guess that would be like a cylinder?), which indeed they are, I&rsquo;ll reflect briefly upon the three of them separately.</p>

<h3>Learning</h3>

<p>I have learned a great deal of new material, but most importantly, I have learned new paradigms and have taken my already existing Ruby knowledge to a level I never knew existed. A few weeks ago ago I would have been proud of a 15-line method that checked whether or not a credit card number was valid. Gone are the days of creating these &lsquo;all-in-ones&rsquo;, what DBC calls <em>God Methods</em>. I have learned the concepts of single responsibility methods and classes, object-oriented design, and reducing dependencies&mdash;within classes, between classes, and even in methods by using the argument hash.</p>

<p>Another significant learning feat was moving in the direction of less primitive terminal apps by impleneting multiple-file apps, SQL databases, ActiveRecord, and the model-view-controller design paradigm (hinting towards the beast that is Ruby on Rails).</p>

<p>Beyond this, my vanilla Ruby skills have improved a great deal, as I feel leagues more confident navigating almost any programming problem. The difficult part is no longer &ldquo;how do I do this in Ruby?&rdquo;, but rather, &ldquo;how do I break this problem down into tangible steps?&rdquo;</p>

<h3>Struggling</h3>

<p>I have struggled in two major regards these past few weeks: one, in how to approach programming challenges with many components, such as with the Sudoku solver challenge during the first week of Phase 1; and two, in how to work on a project with people of varying personalities, from timid and quiet to dominant and loud. The idea of fleshing out the problem in pseudocode (or as one of my Phase 1 teachers calls it on the Friday of Sudoku, <em>Sud-</em>o*-code) was one I could grasp in the abstract, but when it came down to tackling the problem, I always felt myself gravitating towards just hacking away at the keyboard without giving the problem enough forethought. It was my first experience tackling a challenge of this magnitude, and for the first time I couldn&rsquo;t really get away with my Phase 0 forge-ahead-blindly approach. This refusal to take a step back led to much frustration and ultimately not being able to complete the challenge by the end of the day. Although I did complete it the next day, the big takeaway from that day-long struggle was to make sure you know what you&rsquo;re going to do before you do it. Never explore unfamiliar territory without a map&mdash;or at the very least, a compass!</p>

<p>One more struggle, which combines the two above: group work, especially with unclear expectations and ambiguous leadership. It&rsquo;s not easy, and it&rsquo;s very frustrating. The lack of clarity leads to not being able to delegate tasks, and instead everyone working on the same task, which is incredibly inefficient. As Sherif, one of my teachers, put it, it&rsquo;s like doing an &ldquo;eight legged sock race&rdquo;, which is exactly how it felt during one exercise.</p>

<h3>Growing</h3>

<p>My growing is very much tied to my struggles, as I grew tremendously from them. The first and most important way in which I&rsquo;ve grown is in my response to confusion. An overarching lesson to be learned at DBC (and perhaps in life) is to be <em>fearless in the face of confusion</em>, an idea Sherif introduced to us. Although I still have a long way to go, I am beginning to feel less overwhelmed and panicked when presented with a difficult problem or concept.</p>

<p>I have also grown to be more at peace with failure. I&rsquo;ve realized that any failure is temporary, and can be rectified at any later point. This was the case with my momentary Sudoku failure, as well as other points at which I felt like I just couldn&rsquo;t do it. Every time, all it took was good night&rsquo;s sleep to approach the problem with a fresh perspective and solve what seemed insurmountable the day before.</p>

<p>Lastly, I approach problems much more methodically. I had the serendipitous privilege of being a team lead on a small one-day project. Whereas before I would have been too scared to delegate tasks and trust the process, this time we pseudocoded as a group until everyone was clear about their input and output. We all worked separately, and all it took was 5 minutes of &ldquo;gluing&rdquo; to put the parts of the project together. I was so pleased with the fact that, despite not seeing exactly what my team was working on, their components fit together quite seamlessly. It was a great way of finishing off Phase 1, in direct contrast to the much less successful group project I had a week earlier.</p>

<p>My favorite Phase 1 teacher, Derek, said that Phase 1 makes you a programmer, Phase 2 makes you a web developer. I am excited to forge ahead into unfamiliar territory, carrying with me the arsenal I acquired during Phase 1&mdash;<em>embrace the confusion!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL == Sequel // => True (HUH?)]]></title>
    <link href="http://blog.liorrmorrison.com/2014/11/15/sql-equals-equals-sequel-slash-slash-equals-%3E-true-huh/"/>
    <updated>2014-11-15T09:24:13-08:00</updated>
    <id>http://blog.liorrmorrison.com/2014/11/15/sql-equals-equals-sequel-slash-slash-equals->-true-huh</id>
    <content type="html"><![CDATA[<p>I&rsquo;m proud to make this major stride in elevating my status from programming n00b to&hellip; well, whatever the next step closer to bad-ass programmer is. Know how I did it? I learned that SQL is pronounced <em>sequel</em>, not <em>S-Q-L</em>! Yeah! <a href="/images/cool.png">cool!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Conference]]></title>
    <link href="http://blog.liorrmorrison.com/2014/11/13/is-using-octopress-cheating/"/>
    <updated>2014-11-13T16:09:21-08:00</updated>
    <id>http://blog.liorrmorrison.com/2014/11/13/is-using-octopress-cheating</id>
    <content type="html"><![CDATA[<p>During the second week of Phase 0 at DBC, we were asked to create our own websites, including a blog site. After laboring for many hours over it, including tinkering endlessly with CSS padding, margins, background-colors, etc (even just <em>thinking</em> about it overwhelms me!), I ended up with something I was pretty proud of! So for the last few months I&rsquo;ve been thinking, <em>&ldquo;Why not show off my own HTML CSS skills by keeping my original blog and presenting that to prospective employers, rather than using a framework?&rdquo;</em> I am now coming to realize I should indeed use a framework, which is needless to say because you&rsquo;re reading an Octopress blog. But why? Well, sure my original blog wasn&rsquo;t bad, but it was severely limited and had some bugs. The design wasn&rsquo;t completely responsive, and it didn&rsquo;t have nearly as much functionality (Facebook, Twitter, GutHub integration, DISQUS comments, etc.). Also, every time I wanted to write a post I would have to copy it in to the blog.html page and deal with annoying tags &ndash; not to mention the headache of including snippets of code. Bottom line: it was a hassle, and I&rsquo;ve realized no hackers really do it like that. Octopress is known as the &ldquo;hacker blog&rdquo; platform, and although the process of writing posts is relatively automated, you still use Sublime to write the posts, edit YML files yourself, and push to GitHub - so it really is a perfect hacker platform. There&rsquo;s no nitty gritty stuff like dealing with HTML tags, but the platform still requires the blogger to know how to use git and make changes to files written in various programming languages.</p>

<h3>But what about the design? Isn&rsquo;t it too bland?</h3>

<p>Well, I probably would have thought that a few months ago, but not now. I used to think that the more technical, animated, interactive a site is, the better&hellip; and that a site&rsquo;s coolness was determined by how many cool JS and jQuery features are implemented. Not so! What&rsquo;s the function? Form should follow function, and if the function is to read content and navigate blog arhives, you don&rsquo;t need any of that fancy stuff. It&rsquo;s not appropriate. Octopress does exactly what it should do, and nothing more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Makes a Good Question?]]></title>
    <link href="http://blog.liorrmorrison.com/2014/11/12/what-makes-a-good-question/"/>
    <updated>2014-11-12T13:52:27-08:00</updated>
    <id>http://blog.liorrmorrison.com/2014/11/12/what-makes-a-good-question</id>
    <content type="html"><![CDATA[<p>Hmm, good question! I would say it depends somewhat on the context in which the question is being asked, as well as the subject matter. For this blog post, to keep things within a manageable scope, I&rsquo;ll focus on what makes a good programming-related question. There&rsquo;s quite a lot of material out there about what makes good questions, and I echo many of the qualities that others have heralded. This post is a synthesis of outside sources with some of my own original thoughts and examples. The three overarching qualities that make good questions are:</p>

<ol>
<li>Specificity</li>
<li>Clarity</li>
<li>Relevance</li>
</ol>


<p>My fellow cohortmates are generally quite good at asking specific, clear, and relevant questions, but every once in a while you&rsquo;ll come across a question that more or less follows this pattern:</p>

<blockquote><p>&ldquo;Help! I can&rsquo;t get this to work&rdquo;</p>

<p>(insert overly large block of code here)</p>

<p>&ldquo;Why isn&rsquo;t it working?&rdquo;</p></blockquote>

<p>Perhaps it&rsquo;s obvious enough, but this is an example of a not-so-great question. Is it specific? No. Is it clear? Not at all. Is it relevant? Perhaps, but it&rsquo;s impossible to tell since it isn&rsquo;t specific or clear enough. You should evaluate a question&rsquo;s worthiness based on how easily you understand it, without having to run the code yourself. If anyone wanted to help out this distressed person, they would have to run the code to see what error the person is talking about, then troubleshoot it for the person. That&rsquo;s too much to ask of an answerer. Ideally, a good question is asked once the asker has already done a preliminary troubleshooting session, has isolated the problem somewhat, and asks a more specific question regarding the error message and the particular piece of code that causes the error, not the entire program. Odds are only a small fraction of the entire code file is causing the problem, so include only that code!</p>

<p>Let&rsquo;s quickly look at each of the three qualities I mention are key ingredients to good questions.</p>

<h3>Specificity</h3>

<p>Is your question about a particular issue you are having with your code? Go into detail about the issue. Don&rsquo;t do what the distressed person did above and just plop the entire thing on someone else. Take time to investigate what the problem is, and explain it as specifically as you can. If you have a limited amount of characters to work with, such as in the title of a question, make sure you make it as specific as possible so potential answerers know what they&rsquo;re dealing with before they click your question. Here&rsquo;s an example of two questions, one is good and one is bad. It should be very obvious:</p>

<blockquote><p>&ldquo;How does the math module work?&rdquo;</p>

<p>&ldquo;How do you endow a class with the Math module in Ruby?&rdquo;</p></blockquote>

<p>So which one is bad? The first one, of course. It&rsquo;s not specific enough. How does it <em>&ldquo;work&rdquo;</em>? I&rsquo;m not even sure what that means, or how to answer it. It&rsquo;s far too general. And what language are you talking about? Multiple languages might have the same math module, so you better be clear about which one you&rsquo;re talking about! If your question leads answerers to ask you questions in return (like that first one), it&rsquo;s probably not good question. Now, the second one: it&rsquo;s much better. It asks about how you perform a particular action in a particular language. Anyone who stumbles upon this question in forums knows exactly how to answer it, because it is clear and specific.</p>

<h3>Clarity</h3>

<p>Make sure there are no ambiguities in your question. There should be one way of interpreting it, and it should be clear, understandable, and not too complex. Here are two more examples:</p>

<blockquote><p>&ldquo;Calculating Averages in Ruby Name Error&rdquo;</p>

<p>&ldquo;I have this array: [1, 2, 3, 4] and a hash {1: &#8220;one&rdquo;, 2: &ldquo;two&rdquo;, 3: &ldquo;three&rdquo;, 4: &ldquo;four&rdquo;}. If I want to replace the array numbers with the hash variable, how would I do that?&#8221;</p></blockquote>

<p>Which one is bad? Both of them! The first one is incomprehensible and ambiguous. It suffers from being extremely unclear and extremely unspecific. The last one, while it is specific, is still ambiguous and almost too specific to be clear. The person could have asked: &ldquo;How do you replace the elements of an array with the values of a hash in Ruby?&rdquo;</p>

<p>Again, this last question is much more digestible. It is clear, unambiguous, and specific without being overwhelming with unnecessary details.</p>

<h3>Relevance</h3>

<p>This last category is a bit trickier. Basically, an asker should ask a question that adds value to his or her understanding of a concept, and they should know their audience - who they are asking. In most cases, such as on Stack Overflow, this is a wold-wide network of brilliant programmers. Don&rsquo;t waste their time asking irrelevant or overly basic questions.</p>

<blockquote><p>&ldquo;When was Ruby invented?&rdquo;</p>

<p>&ldquo;What is the difference between an integer and a float?&rdquo;</p></blockquote>

<p>If you are seeking a fact, Google it. Why ask a team of programmers a meta-fact about Ruby that warrants, literally, a one-word response? It&rsquo;s not worth their time, and it&rsquo;s certainly not an efficient use of your time, either! And how about the second example? It&rsquo;s not quite as bad, but again, this is a very basic question that you are better off discovering for yourself through your own research. Read about what an integer is, what a float is, and try working with them. If you come across a specific problem regarding the use of integers and floats in a program, <em>that&rsquo;s</em> the time to ask a question.</p>

<p>I know I may have veered a bit into what makes a good question on the Internet, but the basic tenets still apply to questions asked in the physical world.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Event Listeners: The Critical Link]]></title>
    <link href="http://blog.liorrmorrison.com/2014/11/08/event-listeners-the-critical-link/"/>
    <updated>2014-11-08T15:38:35-08:00</updated>
    <id>http://blog.liorrmorrison.com/2014/11/08/event-listeners-the-critical-link</id>
    <content type="html"><![CDATA[<p>JavaScript event listeners are kind of like the nervous system of a website. Without them, the website does not have the ability to sense, or &ldquo;listen to&rdquo;, actions the user can take (such as clicking, pressing keys, loading the page, etc). I first learned event listeners through programming my first JS project, the <a href="http://blog.liorrmorrison.com/dbc/airport">airporter game</a>. Event listeners allow you to change or manipulate HTML/CSS elements when a certain element &ldquo;hears&rdquo; an event. To illustrate this idea, let&rsquo;s take an example from my airport game. It would help you understand this explanation if you played a quick round of the game first! In the game, I have two event listeners, one that targets the entire window and one that targets an HTML element:</p>

<pre><code class="javascript">airbus.addEventListener('click', clearWay)
window.addEventListener('keydown', move)
</code></pre>

<p>Let&rsquo;s analyze the syntax of these event listeners. The functionality of the <code>addEventListener</code> function is obvious enough, but what&rsquo;s going on with the rest of it? You call the <code>addEventListener</code> function on an HTML/DOM element. In the first example, it is being called on <code>airbus</code>, which is an a div in the HTML with the id &ldquo;airbus&rdquo;. If you have played the game, the airbus is the &ldquo;little scoundrel&rdquo; airplane that gets in the way of your progress! Now, what&rsquo;s going on in the parenthesis? The <code>addEventListener</code> function takes two parameters: an event, and a function to run when that event occurs (there is an optional boolean third parameter, but it is pretty technical so I won&rsquo;t discuss it here). In the first example, the event is &lsquo;click&rsquo;, and the function is clearWay. So when the airbus element is clicked, the clearWay function will be run. I defined the clearWay function such that it changes the element&rsquo;s top style to 200px from where it originally was lower down on the runway. How does this manifest? Well, if you click the airbus on the page, it moves up away from the runway! As for the second example, why do we target the window if we really mean to move the other airplane? Well, the &lsquo;keydown&rsquo; event can&rsquo;t really target a particular HTML DOM element. The only part of a web page that can &ldquo;hear&rdquo; it is the window itself! That allows you to use the arrow keys to control the airplane without having to click, scroll over, or do anything to the airplane itself. As you can see, the second event listener executes the &ldquo;move&rdquo; function upon the &lsquo;keydown&rsquo; event (which, in the move function, I limit to just the arrow keys). The move function changes the boeing element&rsquo;s CSS positioning. Event listeners are the link between JavaScript and HTML/CSS elements. Without them, no script would be able communicate with and manipulate the web page!</p>
]]></content>
  </entry>
  
</feed>
