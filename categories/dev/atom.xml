<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Dev | Liorr Yehuda Morrison]]></title>
  <link href="http://blog.liorrmorrison.com/categories/dev/atom.xml" rel="self"/>
  <link href="http://blog.liorrmorrison.com/"/>
  <updated>2014-11-10T11:20:55-08:00</updated>
  <id>http://blog.liorrmorrison.com/</id>
  <author>
    <name><![CDATA[Liorr Yehuda Morrison]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CSS Subleties: Margin, Padding, and Border]]></title>
    <link href="http://blog.liorrmorrison.com/2014/09/28/css-subleties-margin/"/>
    <updated>2014-09-28T12:10:21-07:00</updated>
    <id>http://blog.liorrmorrison.com/2014/09/28/css-subleties-margin</id>
    <content type="html"><![CDATA[<p>After having immersed myself in the world of HTML and CSS through creating a fully functional website in a mere 36 hours, I came out of it with a great deal of knowledge (although admittedly an equally great deal of questions) about front-end web development and design. Today I will do my best to explain one such piece of knowledge of which I feel I have a pretty clear understanding: the difference between margins, padding, and borders. To understand these topics at all, I need to first explain the fundamental structure of almost all websites. When you load a website, you immediately notice that its content is organized in a certain way. You may have a header bar, one or several content areas, a navigation bar, a footer, etc. There is always a lot of thought (or there at least should be!) that goes into this design. When writing the code for the website, what allows the programmer to tell which material to go where? Well, odds are, the tool s/he used was the div. A div, which derives from the word &ldquo;divide&rdquo; is a part of the web page that you section off. Making divs is really easy in the HTML file (the content and framework part of the site), but the challenging part is bringing them to &ldquo;life&rdquo; using CSS (cascading style sheets). When you create a div in the HTML, it exists, but it has no idea where to go on the web page, so you give it instructions by using CSS properties like so:</p>

<pre><code class="css">#div {
  height: 50%;
  width: 40%;
  float: right;
  position: absolute;
  background-color: blue;
  border-style: solid;
  border-color: black;
  border-width: 2px;
}
</code></pre>

<p>Now, what&rsquo;s the difference between padding, margins, and borders? First, let me explain padding and margins, as they are the most closely-related and confusable of the three. The margin of a div determines how much space the div has relative to other divs and the confines of the web page. If you set a div with all four margins set to 0, it will exist flush against other divs or the edges of the web page. There will be no breathing room. So the margin determines the space outside of the div itself relative to other elements of the web page.</p>

<p>The padding, on the other hand, is more inward-looking. It determines how close the div&rsquo;s content can get to the div&rsquo;s end. If you set all four sides to padding 0, the content will extend right up flush against the outer walls of the div. If you give the content more padding, it will stay away from the outer walls. You can compare the margin vs. padding issue to government, as margin is like foreign policy (how divs interact with the outside world), and padding is like domestic policy (how divs treat what&rsquo;s inside of them).</p>

<p>Finally, the border is simply that: the outermost part of the div. The border doesn&rsquo;t really determine anything about the div&rsquo;s relationship with other divs (margin) or its own inner content (padding). Rather, it is an almost purely stylistic feature. You can style the border in many ways, from a simple black solid line, to a dotted line, to even 3-D designs. Borders adds some character to the website and help compartmentalize the content. The one trick with the border is that if you make very large borders, they actually protrude outside of the div&rsquo;s territory (imagine an extremely thick border fence around a country that cuts into its neighboring country&rsquo;s territory). The programmer has to watch out for this, and sometimes has to compensate for large borders by changing around margins so that the border doesn&rsquo;t interfere with other content. Other than this case, borders don&rsquo;t really influence relationships between divs, and certainly not relationships between divs and their content.</p>

<p>So there you have it! I hope I helped clarify some confusion regarding these topics!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git, GitHub, & Version Control: Programmers' Godsend]]></title>
    <link href="http://blog.liorrmorrison.com/2014/09/18/version-control/"/>
    <updated>2014-09-18T13:45:42-07:00</updated>
    <id>http://blog.liorrmorrison.com/2014/09/18/version-control</id>
    <content type="html"><![CDATA[<p>Version control in computer programming has many benefits. For one, it basically allows the programmer to &ldquo;go back in time&rdquo; in that various versions of the project are saved throughout a period of time. If the programmer works on the project, but accidentally adds a bug in committing those changes, they can go back to the version of that code <em>before</em> they made that mistake, rather than trying to figure out how it was before. This saves a lot of time, panic, and effort! Version control is also essential in collaborative projects, where there is more than one programmer working on a code base. It allows the programmers to each have their own copy of the code base, and make changes to that personal copy (and test those changes to make sure they work/don&rsquo;t add a bug) before adding it to the master copy. Git is software that makes version control easy. It runs in the background of any directory you decide to initialize with git. It</p>

<ul>
<li><p>notices if you have made any changes to that directory, whether it be adding files or editing files,</p></li>
<li><p>knows exactly what those changes are, and can show you them, and</p></li>
<li><p>allows you to save (&ldquo;commit&rdquo;) those changes along with a small message where you describe what changes you have made.</p></li>
</ul>


<p>Git then keeps a log of your commits (changes), and you can go back and see the code as it was before and after the various changes you made. GitHub is another useful tool for programmers, especially for teams of developers. Storing your code on GitHub allows you to collaborate with people remotely, so you can theoretically work on a project with a remote team all around the world, so long as they have Internet access. While git lives locally on your computer, and is therefore useful for working on your local disk, GitHub lives on the cloud, and works in tandem with git to push your code on to GitHub, enabling other team members to see your code, and enabling <em>you</em> to make changes to the master copy of the project. GitHub also provides peace of mind, knowing that your code is stored on a remote and very reliable server; it basically acts as a backup of your code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Who I Am]]></title>
    <link href="http://blog.liorrmorrison.com/2014/09/12/who-i-am/"/>
    <updated>2014-09-12T22:06:40-07:00</updated>
    <id>http://blog.liorrmorrison.com/2014/09/12/who-i-am</id>
    <content type="html"><![CDATA[<p>Yeah, I&rsquo;m a noob, but everyone starts somewhere.</p>

<p>I am a twenty-year-old living in San Francisco, and I&rsquo;m about to start intensive software development training at Dev Bootcamp, the recently established coding school that has, in a mere two years, pioneered an all-new, avant-garde genre in the field of education. What led me here? Less than two years ago I was a geography major at a ritzy liberal arts college in Vermont, and now I&rsquo;m in San Francisco studying to become a programmer? After completing my first year of college, I took what I thought would be a semester off to save money ($60,000 tuition + meager family income meant lots of debt, fast) and do some introspection. My life from 9th grade-on had been a pre-written (and admittedly boring) script, slaving away at academic work just to get in to my dream college. Taking a step off the proverbial treadmill seemed like just the thing to clear my mind and devote some time to myself. So being the geography nerd that I was (and still am), I traveled around the US for a couple months, and then and spent some time teaching and translating in the Middle East. But before I knew it, the grand adventure had ended, and it was time to return to academia&hellip; Except when I returned, my perspective had changed. The whole I was in school, I never gave it much critical thought &mdash; ironically enough, I gave plenty of critical thought to the works of literature I studied, but not to the education itself. Coming back, facing the sky-high price tag and questionable practicality of my liberal arts education, I decided to extend my leave&hellip;(dramatic pause) <em>indefinitely</em>.</p>

<p>So I worked for a while, got some financial freedom, but was soon ready for something bigger and better&hellip; and boy, let me tell you, the prospect of enrolling in community college classes just <em>didn&rsquo;t</em> have that spark I was looking for. And that&rsquo;s why I&rsquo;m here. Writing this blog. Studying programming. Challenging the status quo by putting off college and learning something completely different, in a setting I didn&rsquo;t even know existed a year ago. I had always been a fan and avid user of technology, but for whatever reason didn&rsquo;t consider going into it. I never thought I had what it took to be a programmer&hellip; Well, turns out I&rsquo;m wrong.</p>

<p>Programming isn&rsquo;t about holing up and doing weird esoteric math-like things all day. It&rsquo;s about logical thinking and familiarizing yourself with languages to express that thinking. It&rsquo;s about creation. And what better field is there than one that will pay you to think? And one that allows you to integrate your passions into the work that you do?</p>

<p>I&rsquo;m disillusioned with the status quo. I&rsquo;m excited about learning how to learn, about challenging myself in unprecedented ways. I intend this blog to be a means through which I synthesize new information, mostly to help me organize make connections between ideas, but also theoretically to help other noobs like myself navigate this new world.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Request-Response]]></title>
    <link href="http://blog.liorrmorrison.com/2014/09/07/request-response/"/>
    <updated>2014-09-07T15:12:29-07:00</updated>
    <id>http://blog.liorrmorrison.com/2014/09/07/request-response</id>
    <content type="html"><![CDATA[<p>Request-Response is the fundamental building block of the Internet and computer networking. The systems works likes so:</p>

<p>A personal computer, the <em>client</em>, is used to access a web page stored on a remote database. The database is linked to a computer that acts as the <em>server</em>, which can access the database and provide the requested information to the client. Using a web browser, the client requests the web page from the server, and the server responds to the client with the requested information by accessing the database. It&rsquo;s no coincidence that the words <em>client</em> and <em>server</em> are used for this system, as it&rsquo;s very analogous to a restaurant. The client, or customer, orders the food by telling the server, or waiter, what he/she wants (&ldquo;Hi, I&rsquo;ll have a google burger please&rdquo;). The waiter then goes to the kitchen, the database, gets the order, and serves it to the &ldquo;client&rdquo;/customer. Now it all makes sense why sometimes, when a server experiences higher-than-normal requests, it wont be able to respond to all of them, and will temporarily shut down. This is akin to how a restaurant will often make customers wait during peak hours, because they simple can&rsquo;t handle all those orders at once!</p>

<h3>HTTP</h3>

<p>The &ldquo;language&rdquo; used in this process is called the Hypertext Transper Protocol, and includes request &ldquo;methods&rdquo;, the most oft used being GET, HEAD, POST, and DELETE.</p>

<ul>
<li><p>GET is, as you could guess, is the request for retrieving data.Going to google.com, for example, would use the GET http method.Because it does not modify anything on the server-side, it is considered a &ldquo;safe&rdquo; method.</p></li>
<li><p>HEAD is the same as GET, except that the server only returns <em>metainformation</em>, that is, information about the entity rather than the entity itself. This is typically used in testing whether links are valid or have recently been modified. Because no modification occurs, it is also a safe method.</p></li>
<li><p>POST is the request that the server accept a new piece of information enclosed in the request; a typical example of this is a blog or forum, where clients are adding posts that change the state of the server, or have other side effects (like transferring money or sending an email). Because something is being changed with the POST method, it is not considered a safe
method.</p></li>
<li><p>DELETE is the request that a given piece of information or resource be deleted by the server, like deleting an email. Again, because the state of the server is being changed, it is not considered a safe method.</p></li>
</ul>


<p>During the early years of the Internet, the web was dominated by static websites that, when requested by the client, were generated and didn&rsquo;t change unless another request was made for the most up-to-date version. Today, however, there are a plethora of technologies that allow for dynamic web pages, where there is a constant flow of communication between the client and the server, allowing content to change from moment to moment. The main technology that made these dynamic web pages a reality is AJAX, which is behind almost all of the asynchronous, dynamic web applications that dominate today&rsquo;s Internet. AJAX allows for this <em>asynchronization</em>, where a request can be made in the back-end without having to wait for a response to make another request, thus not being synchronized. These asynchronous requests and responses can happen without having to reload the web page, which is how we see content changing on the website without the website&rsquo;s core structure changing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Continued]]></title>
    <link href="http://blog.liorrmorrison.com/2014/09/07/testing-continued/"/>
    <updated>2014-09-07T14:33:58-07:00</updated>
    <id>http://blog.liorrmorrison.com/2014/09/07/testing-continued</id>
    <content type="html"><![CDATA[<p>A few more notes to add about testing.
The entire testing process is comprised of different types of testing, including unit testing, feature testing, and integration testing.</p>

<p>-Unit Testing</p>

<p>Unit testing is the process of testing small units of code before implementing and integrating them into functionalities of a software. For example, if you were building a website that took credit card payments and wanted to check whether or not the user entered in a valid card number, you would want to make sure that the small piece of code that checks for a valid card number actually works before integrating it into the software.</p>

<p>-Integration Testing</p>

<p>The next step after unit testing is integration testing, which tests how those smaller units of code work in tandem. Perhaps several units of code come together to provide a working functionality element of a software, but not the entire working product.</p>

<p>-Feature testing</p>

<p>Feature testing is one of the last steps of the testing process in which the code comes together to form a working, functional product that a user can interface with. Feature testing may or may not be testing of the entire software, but it at the very least tests a major working component. Feature testing is usually less technical and actually involves using the software to ensure it works properly.</p>
]]></content>
  </entry>
  
</feed>
