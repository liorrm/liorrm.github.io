<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Dev | Liorr Yehuda Morrison]]></title>
  <link href="http://blog.liorrmorrison.com/categories/dev/atom.xml" rel="self"/>
  <link href="http://blog.liorrmorrison.com/"/>
  <updated>2014-11-10T12:43:59-08:00</updated>
  <id>http://blog.liorrmorrison.com/</id>
  <author>
    <name><![CDATA[Liorr Yehuda Morrison]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Enumerables: Some Mixins for Your Picks-ins]]></title>
    <link href="http://blog.liorrmorrison.com/2014/10/08/enumerables-some-mixins-for-your-picks-ins/"/>
    <updated>2014-10-08T19:05:09-07:00</updated>
    <id>http://blog.liorrmorrison.com/2014/10/08/enumerables-some-mixins-for-your-picks-ins</id>
    <content type="html"><![CDATA[<p>Now almost done with Week 4 of Phase 0, we are plumbing the depths of Ruby and its amazing abilities. For this blog post, I will introduce you to one of Ruby&rsquo;s built-in Enumerable methods. Enumerable is a &ldquo;mixin&rdquo; module in Ruby, meaning that its methods are borrowed from various other class methods. Therefore, you can apply Enumerable methods to various classes, namely arrays and hashes. The method I&rsquo;ll focus in on is the #map method, which can be used on both arrays and hashes. I am going to assume that you have some sense of what the #each method does &mdash; basically, it iterates over an array, calling the given block (the code between braces or after a &lsquo;do&rsquo; statement) once for each element in the array; it passes each array element as a parameter to the block. But it doesn&rsquo;t have the power to actually modify the element. You can use the array&rsquo;s elements to create new data, but not to change the elements themselves, as the following example demonstrates:</p>

<pre><code class="ruby">numbers = [1, 2, 3]

def total(array)
  sum = 0
  array.each do |num|
    sum += num
  end
  sum
end

total(numbers) #=&gt; 6

numbers #=&gt; [1, 2, 3]
</code></pre>

<p>Here, #each is used to add up the elements of the array, and store them in a separate variable. If you were to return the array afterwards, it would be identical. Here&rsquo;s an analogy: the #each method &ldquo;visits&rdquo; each element and can get to know them well, but it can&rsquo;t change them. That&rsquo;s where map comes in. To demonstrate the #map method&rsquo;s differences, let&rsquo;s compare the following two snippets of code:</p>

<pre><code class="ruby">##### using #each #####

numbers =  [1, 2, 3, 4, 5]

numbers.each do |num|
  num * 2
end

#=&gt; [1, 2, 3, 4, 5]

##### using #map #####

array #=&gt; [1, 2, 3, 4, 5]

array.map do |num|
  num * 2
end

#=&gt; [2, 4, 6, 8, 10]

numbers #=&gt; [1, 2, 3, 4, 5]
</code></pre>

<p>The #each method does nothing, while #map successfully executes the block and modifies each element of the array. But does it really change the array? Not exactly. It shows you a modified version of that array with the code block executed, but you can think of that as a temporary glimpse into what it would do it if actually did modify it. As you can see in the above example, if you call the array after calling the code block on it, it remains unchanged. For a true, permanent change, we need the &ldquo;!&rdquo; at the end, or we could save the modified array to a new variable. The exclamation point at the end of a method indicates that the method is what is called a &ldquo;dangerous&rdquo; or &ldquo;destructive&rdquo; method (or colloquially, a &ldquo;bang&rdquo; method) because it permanently changes the composition of the array, as the example below demonstrates:</p>

<pre><code class="ruby">numbers = [1, 2, 3, 4, 5]

numbers.map! do |num|
  num * 2
end

#=&gt; [2, 4, 6, 8, 10]

numbers #=&gt; [2, 4, 6, 8, 10]
</code></pre>

<p>The #map and #map! methods are very useful in making real changes to various data structures. For example, if you had an array of data containing both strings and numbers and wanted to convert all the numbers to strings, you could use #map or #map!, depending on whether you want to make a modified &ldquo;copy&rdquo; of the array for immediate use, or change it permanently.</p>

<p>Here is another example that uses the map method to convert array elements into strings:</p>

<pre><code class="ruby">i_want_pets = ["I", "want", 3, "pets", "but", "only", "have", 2]

def my_array_sorting_method(source)
  source.map {|element| element.to_s}
end

#=&gt; ["I", "want", "3", "pets", "but", "only", "have", "2"]
</code></pre>

<p>And there you have a little introduction to Ruby&rsquo;s Enumerable module! Be sure to check out the <a href="http://ruby-doc.org">Ruby Documentation </a> for more information and to see other Enumerable methods.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arrays &amp; Hashes: One Is Silver and the Other Gold]]></title>
    <link href="http://blog.liorrmorrison.com/2014/09/30/arrays-and-hashes-one-is-silver-and-the-other-gold/"/>
    <updated>2014-09-30T14:22:53-07:00</updated>
    <id>http://blog.liorrmorrison.com/2014/09/30/arrays-and-hashes-one-is-silver-and-the-other-gold</id>
    <content type="html"><![CDATA[<p>Now almost a third of the way through Phase 0 of Dev Bootcamp, we&rsquo;ve finally moved on from git, HTML, and CSS to the true heart and soul of programming: scripting &ndash; the part that actually makes your web site do stuff rather than just display it. For the first blog topic, we&rsquo;ll discuss arrays and hashes, which are two ways of storing data. Arrays and hashes are each their own classes in the Ruby programming language, meaning they come with their own set of rules that govern how they can be used, and methods than can manipulate the data within them. First let&rsquo;s talk about arrays, since they&rsquo;re simpler, and understanding hashes is easier once you understand arrays.</p>

<p>An array is a series of elements grouped and stored together, separated by commas. They are encapsulated by a pair of brackets on both ends of the series of elements. The elements can be of various types, including strings, numbers, symbols, etc, such as the example below illustrates:</p>

<pre><code class="ruby">example_array = ["string", :symbol, 5, ["this", "is", "crazy"]]
</code></pre>

<p>Yes, you actually can store an array inside of an array (an array within an array is called a nested array). In addition to the element itself, the array knows where the element &ldquo;lives&rdquo; (its position) inside of it, something called the <em>index</em>. The index begins at zero, so the first element of the array can be called like so:</p>

<pre><code class="ruby">example_array[0] #=&gt; "string"
</code></pre>

<p>How would you call the second element of the nested array?</p>

<pre><code class="ruby">example_array[3][1] #=&gt; "is"
</code></pre>

<p>Good. Now that we have an understanding of arrays, we can delve into the world of hashes. Hashes are similar to arrays in that they are also a means of storing a series of elements, but they don&rsquo;t just stop there. Hashes store relationships between its elements in what are called key-value pairs. Whereas an array could store a list of cities:</p>

<pre><code class="ruby">city_array = [:New_York, :Los_Angeles, :Chicago, :Houston]
</code></pre>

<p>the hash could store them AND tell you their populations (or whatever corresponding piece of data), where the city names are the &ldquo;keys&rdquo; and the populations are the &ldquo;values&rdquo;:</p>

<pre><code class="ruby">city_hash = { New_York:    8300000,
              Los_Angeles: 3900000,
              Chicago:    2800000,
              Houston:    2200000  }
</code></pre>

<p> You can access a key&rsquo;s corresponding value like so:</p>

<pre><code class="`ruby"> city_hash[New_York] #=&gt; 8300000
</code></pre>

<p> As you can see, hashes allow for relationships between values, compared to arrays which just list them in a series. Both are incredibly useful and are fundamental to just about any large-scale project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Subleties: Margin, Padding, and Border]]></title>
    <link href="http://blog.liorrmorrison.com/2014/09/28/css-subleties-margin/"/>
    <updated>2014-09-28T12:10:21-07:00</updated>
    <id>http://blog.liorrmorrison.com/2014/09/28/css-subleties-margin</id>
    <content type="html"><![CDATA[<p>After having immersed myself in the world of HTML and CSS through creating a fully functional website in a mere 36 hours, I came out of it with a great deal of knowledge (although admittedly an equally great deal of questions) about front-end web development and design. Today I will do my best to explain one such piece of knowledge of which I feel I have a pretty clear understanding: the difference between margins, padding, and borders. To understand these topics at all, I need to first explain the fundamental structure of almost all websites. When you load a website, you immediately notice that its content is organized in a certain way. You may have a header bar, one or several content areas, a navigation bar, a footer, etc. There is always a lot of thought (or there at least should be!) that goes into this design. When writing the code for the website, what allows the programmer to tell which material to go where? Well, odds are, the tool s/he used was the div. A div, which derives from the word &ldquo;divide&rdquo; is a part of the web page that you section off. Making divs is really easy in the HTML file (the content and framework part of the site), but the challenging part is bringing them to &ldquo;life&rdquo; using CSS (cascading style sheets). When you create a div in the HTML, it exists, but it has no idea where to go on the web page, so you give it instructions by using CSS properties like so:</p>

<pre><code class="css">#div {
  height: 50%;
  width: 40%;
  float: right;
  position: absolute;
  background-color: blue;
  border-style: solid;
  border-color: black;
  border-width: 2px;
}
</code></pre>

<p>Now, what&rsquo;s the difference between padding, margins, and borders? First, let me explain padding and margins, as they are the most closely-related and confusable of the three. The margin of a div determines how much space the div has relative to other divs and the confines of the web page. If you set a div with all four margins set to 0, it will exist flush against other divs or the edges of the web page. There will be no breathing room. So the margin determines the space outside of the div itself relative to other elements of the web page.</p>

<p>The padding, on the other hand, is more inward-looking. It determines how close the div&rsquo;s content can get to the div&rsquo;s end. If you set all four sides to padding 0, the content will extend right up flush against the outer walls of the div. If you give the content more padding, it will stay away from the outer walls. You can compare the margin vs. padding issue to government, as margin is like foreign policy (how divs interact with the outside world), and padding is like domestic policy (how divs treat what&rsquo;s inside of them).</p>

<p>Finally, the border is simply that: the outermost part of the div. The border doesn&rsquo;t really determine anything about the div&rsquo;s relationship with other divs (margin) or its own inner content (padding). Rather, it is an almost purely stylistic feature. You can style the border in many ways, from a simple black solid line, to a dotted line, to even 3-D designs. Borders adds some character to the website and help compartmentalize the content. The one trick with the border is that if you make very large borders, they actually protrude outside of the div&rsquo;s territory (imagine an extremely thick border fence around a country that cuts into its neighboring country&rsquo;s territory). The programmer has to watch out for this, and sometimes has to compensate for large borders by changing around margins so that the border doesn&rsquo;t interfere with other content. Other than this case, borders don&rsquo;t really influence relationships between divs, and certainly not relationships between divs and their content.</p>

<p>So there you have it! I hope I helped clarify some confusion regarding these topics!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git, GitHub, & Version Control: Programmers' Godsend]]></title>
    <link href="http://blog.liorrmorrison.com/2014/09/18/version-control/"/>
    <updated>2014-09-18T13:45:42-07:00</updated>
    <id>http://blog.liorrmorrison.com/2014/09/18/version-control</id>
    <content type="html"><![CDATA[<p>Version control in computer programming has many benefits. For one, it basically allows the programmer to &ldquo;go back in time&rdquo; in that various versions of the project are saved throughout a period of time. If the programmer works on the project, but accidentally adds a bug in committing those changes, they can go back to the version of that code <em>before</em> they made that mistake, rather than trying to figure out how it was before. This saves a lot of time, panic, and effort! Version control is also essential in collaborative projects, where there is more than one programmer working on a code base. It allows the programmers to each have their own copy of the code base, and make changes to that personal copy (and test those changes to make sure they work/don&rsquo;t add a bug) before adding it to the master copy. Git is software that makes version control easy. It runs in the background of any directory you decide to initialize with git. It</p>

<ul>
<li><p>notices if you have made any changes to that directory, whether it be adding files or editing files,</p></li>
<li><p>knows exactly what those changes are, and can show you them, and</p></li>
<li><p>allows you to save (&ldquo;commit&rdquo;) those changes along with a small message where you describe what changes you have made.</p></li>
</ul>


<p>Git then keeps a log of your commits (changes), and you can go back and see the code as it was before and after the various changes you made. GitHub is another useful tool for programmers, especially for teams of developers. Storing your code on GitHub allows you to collaborate with people remotely, so you can theoretically work on a project with a remote team all around the world, so long as they have Internet access. While git lives locally on your computer, and is therefore useful for working on your local disk, GitHub lives on the cloud, and works in tandem with git to push your code on to GitHub, enabling other team members to see your code, and enabling <em>you</em> to make changes to the master copy of the project. GitHub also provides peace of mind, knowing that your code is stored on a remote and very reliable server; it basically acts as a backup of your code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Who I Am]]></title>
    <link href="http://blog.liorrmorrison.com/2014/09/12/who-i-am/"/>
    <updated>2014-09-12T22:06:40-07:00</updated>
    <id>http://blog.liorrmorrison.com/2014/09/12/who-i-am</id>
    <content type="html"><![CDATA[<p>Yeah, I&rsquo;m a noob, but everyone starts somewhere.</p>

<p>I am a twenty-year-old living in San Francisco, and I&rsquo;m about to start intensive software development training at Dev Bootcamp, the recently established coding school that has, in a mere two years, pioneered an all-new, avant-garde genre in the field of education. What led me here? Less than two years ago I was a geography major at a ritzy liberal arts college in Vermont, and now I&rsquo;m in San Francisco studying to become a programmer? After completing my first year of college, I took what I thought would be a semester off to save money ($60,000 tuition + meager family income meant lots of debt, fast) and do some introspection. My life from 9th grade-on had been a pre-written (and admittedly boring) script, slaving away at academic work just to get in to my dream college. Taking a step off the proverbial treadmill seemed like just the thing to clear my mind and devote some time to myself. So being the geography nerd that I was (and still am), I traveled around the US for a couple months, and then and spent some time teaching and translating in the Middle East. But before I knew it, the grand adventure had ended, and it was time to return to academia&hellip; Except when I returned, my perspective had changed. The whole I was in school, I never gave it much critical thought &mdash; ironically enough, I gave plenty of critical thought to the works of literature I studied, but not to the education itself. Coming back, facing the sky-high price tag and questionable practicality of my liberal arts education, I decided to extend my leave&hellip;(dramatic pause) <em>indefinitely</em>.</p>

<p>So I worked for a while, got some financial freedom, but was soon ready for something bigger and better&hellip; and boy, let me tell you, the prospect of enrolling in community college classes just <em>didn&rsquo;t</em> have that spark I was looking for. And that&rsquo;s why I&rsquo;m here. Writing this blog. Studying programming. Challenging the status quo by putting off college and learning something completely different, in a setting I didn&rsquo;t even know existed a year ago. I had always been a fan and avid user of technology, but for whatever reason didn&rsquo;t consider going into it. I never thought I had what it took to be a programmer&hellip; Well, turns out I&rsquo;m wrong.</p>

<p>Programming isn&rsquo;t about holing up and doing weird esoteric math-like things all day. It&rsquo;s about logical thinking and familiarizing yourself with languages to express that thinking. It&rsquo;s about creation. And what better field is there than one that will pay you to think? And one that allows you to integrate your passions into the work that you do?</p>

<p>I&rsquo;m disillusioned with the status quo. I&rsquo;m excited about learning how to learn, about challenging myself in unprecedented ways. I intend this blog to be a means through which I synthesize new information, mostly to help me organize make connections between ideas, but also theoretically to help other noobs like myself navigate this new world.</p>
]]></content>
  </entry>
  
</feed>
